from django.http import HttpResponse
from django.shortcuts import redirect
from django.template.response import TemplateResponse

from wagtail.admin import messages
from wagtail.admin.auth import user_passes_test
from wagtail.contrib.forms.views import SubmissionsListView
# Todo me ----------------
from django.utils.html import format_html
from django.urls import reverse
from wagtail.images import get_image_model


# Todo me ----------------

def user_is_called_bob(user):
    return user.first_name == 'Bob'


@user_passes_test(user_is_called_bob)
def bob_only_zone(request):
    return HttpResponse("Bobs of the world unite!")


def message_test(request):
    if request.method == 'POST':
        fn = getattr(messages, request.POST['level'])
        fn(request, request.POST['message'])
        return redirect('testapp_message_test')
    else:
        return TemplateResponse(request, 'wagtailadmin/base.html')


class CustomSubmissionsListView(SubmissionsListView):
    paginate_by = 50
    ordering = ('submit_time',)
    ordering_csv = ('-submit_time',)

    def get_csv_filename(self):
        """ Returns the filename for CSV file with page title at start"""
        filename = super().get_csv_filename()
        return self.form_page.slug + '-' + filename


# Todo me --------------------
class CustomSubmissionsImageView(SubmissionsListView):

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)

        if not self.is_export:
            # generate a list of field types, the first being the injected 'submission date'
            field_types = ['submission_date'] + [field.field_type for field in self.form_page.get_form_fields()]
            data_rows = context['data_rows']

            ImageModel = get_image_model()

            for data_row in data_rows:

                fields = data_row['fields']

                for idx, (value, field_type) in enumerate(zip(fields, field_types)):
                    if field_type == 'image' and value:
                        image = ImageModel.objects.get(pk=value)
                        rendition = image.get_rendition('fill-100x75|jpegquality-40')
                        preview_url = rendition.url
                        url = reverse('wagtailimages:edit', args=(image.id,))
                        # build up a link to the image, using the image title & id
                        fields[idx] = format_html(
                            "<a href='{}'><img alt='Uploaded image - {}' src='{}' />{} ({})</a>",
                            url,
                            image.title,
                            preview_url,
                            image.title,
                            value
                        )

        return context
# Todo me --------------------
